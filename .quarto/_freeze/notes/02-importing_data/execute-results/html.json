{
  "hash": "7dd812c123828aa1c8be04765a4e581f",
  "result": {
    "markdown": "---\ntitle: Importing Data in R\nauthor: Jose Toledo Luna\ndate: October 27, 2023\ntoc: true\n---\n\n\n## Comma-Seperated Values (CSV) \n\n:::callout-warning\nThis tutorial assumes the data set is in working condition. That is we assume the default settings for `read.csv`. In some cases we may need to change the header, specify the field separator and more. See `?read.csv` for further details and examples.\n:::\n\nWe will now import a `csv` file, to do this we will use the `read.csv` function. A simple template to follow is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(file = 'path where csv is located in your computer')\n```\n:::\n\n\nAn easy way to find the location of your data *(or any file)* is using the `file.choose()` function in R. `file.choose()` will bring up a file explorer window that allows you to interactively choose a file path to work with.\n\nIn your console, run the following command\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.choose()\n```\n:::\n\n\nFor example, after running the above command the `births` dataset is located in\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/toledo60/Desktop/Projects/ucla-stats13/data/births.csv\"\n```\n:::\n:::\n\n\n:::callout-warning\nDepending on your location and operating system the directory will be different\n:::\n\nTherefore, to read the `births` data set I would copy/paste the directory of the csv location and run the following command\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth_dat <- read.csv(file = \"/Users/toledo60/Desktop/Projects/ucla-stats13/data/births.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  X Gender Premie weight Apgar1 Fage Mage Feduc Meduc TotPreg Visits   Marital\n1 1   Male     No    116      9   28   34     6     3       2     10   Married\n2 2   Male     No    126      8   30   18    12    12       1     14 Unmarried\n3 3   Male     No    161      8   28   29    12    12       3     14   Married\n4 4   Male     No    133      9   26   23     8     9       3     10   Married\n5 5 Female     No    119      8   30   19    12    12       2     12 Unmarried\n6 6   Male     No    110      9   30   26    12    16       2     13 Unmarried\n  Racemom Racedad   Hispmom   Hispdad Gained     Habit MomPriorCond BirthDef\n1   White   White   Mexican   Mexican     30 NonSmoker         None     None\n2   White Unknown   NotHisp   Unknown     50    Smoker At Least One     None\n3   White   White OtherHisp OtherHisp     65 NonSmoker         None     None\n4   White   White   Mexican   Mexican      8 NonSmoker         None     None\n5   Black Unknown   NotHisp   Unknown     20 NonSmoker         None     None\n6   Black Unknown   NotHisp   Unknown     32 NonSmoker         None     None\n     DelivComp BirthComp\n1         None      None\n2         None      None\n3 At Least One      None\n4 At Least One      None\n5         None      None\n6         None      None\n```\n:::\n:::\n\n\n\nWe are not just limited to `csv` files, we can import data from Excel (in `csv`, `XLSX`, or `txt` format), `SAS`, `Stata`, `SPSS`, or others. A good reference to import various data formats can be found on [datacamp r-data-import tutorial](https://www.datacamp.com/tutorial/r-data-import-tutorial)\n\n\n## Text File (TXT)\n\nNext, we consider importing a `.txt` file. To do so we will use the `read.table` function instead of the `read.csv` function. For this example, we consider the `ozone.txt` file from our course website\n\nA simple template to follow is \n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.table(file = 'path where txt file is located in your computer')\n```\n:::\n\n\nAfter running `file.choose()` on our console and locating the path in which we stored our data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.choose()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/toledo60/Desktop/Projects/ucla-stats13/ucla/stats10/data/ozone.txt\"\n```\n:::\n:::\n\n\nwe can copy/paste the path as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nozone_dat <- read.table(file = \"/Users/toledo60/Desktop/Projects/ucla-stats13/data/ozone.txt\", \n                        header =TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nozone_dat\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n          x       y    o3\n1 -120.0258 34.4622 0.044\n2 -119.7413 36.7055 0.081\n3 -121.7333 36.4819 0.035\n4 -119.2908 36.3325 0.080\n5 -117.1289 32.8364 0.053\n```\n:::\n:::\n\n\nYou will notice we now used an additional argument `header = TRUE` in our `read.table` function. We use `header=TRUE`, whenever the text tile contains names of the variables as its first line. \n\nIf we forget to use `header=TRUE`, the first line of the text file will be treated as a row of the dataset and `read.table` will automatically create the variable names for us\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrong_ozone_dat <- read.table(file = \"/Users/toledo60/Desktop/Projects/ucla-stats13/data/ozone.txt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrong_ozone_dat\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         V1      V2    V3\n1         x       y    o3\n2 -120.0258 34.4622 0.044\n3 -119.7413 36.7055 0.081\n4 -121.7333 36.4819 0.035\n5 -119.2908 36.3325  0.08\n```\n:::\n:::\n\n\nIn the above example, `read.table` automatically create the variable names `V1,V2,V2` for each column and the first row has values `x,y,o3` *(which is incorrect)*.\n\nIn conclusion, some text files do not have variable names in the first row and only contain the actual data. As a result, it is our responsibility to import the data in a suitable manner.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}