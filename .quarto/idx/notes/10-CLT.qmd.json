{"title":"Introduction to Central Limit Theorem","markdown":{"yaml":{"author":"Jose Toledo Luna","date":"October 27, 2023","title":"Introduction to Central Limit Theorem","toc":true},"headingText":"Sampling Distributions","containsRefs":false,"markdown":"\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.width = 6,\n  fig.height = 4,\n  warning = FALSE,\n  eval = TRUE\n)\n```\n\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(palmerpenguins)\n```\n\n```{r}\ntheme_set(theme_bw())\ntheme_replace(panel.grid.minor = element_blank(),\n              panel.grid.major = element_blank())\n```\n\n\n\n\n### Sample mean\n\nThe sampling distribution of the sample mean is the theoretical distribution of means that would result from taking all possible samples of size $n$ from the population.\n\nSuppose we are sampling from a population which comes from a standard Normal distribution such that observations in our sample are *iid (independent, identically distributed)*. Each sample of size $n$ will then consists of realizations $\\{x_1,\\dots,x_n\\}$, such that each $x_i$ will be a realization of the random variable $X_i \\sim N(0,1)$\n\nTo obtain the sampling distribution for the sample mean,\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population\n(2) Compute the sample mean and store the result in a variable, say `sample_means`\n(3) Plot each of the `sample_means` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 100 # each sample will be of size 100\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = sample_size, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe plot above is the distribution of sample means after taking 10,000 samples with size $n=100$ from the population. The overall distribution appears to be normally distributed *(bell shaped curve)*.\n\n\nThe **Central Limit Theorem** *(CLT)* states that if you have a population with mean $\\mu$ and standard deviation $\\sigma$ and take sufficiently large random samples from the population with replacement, then the distribution of the sample means *(sampling distribution)* will be approximately normally distributed with mean $\\mu$ and standard error $\\frac{\\sigma}{\\sqrt{n}}$. Note, the standard deviation of the sampling distribution of the sample mean *(or any other statistic)* is referred to as the *standard error*.\n\nRecall, the population is distributed as a standard normal distribution, i.e $N(\\mu=0,\\sigma=1)$\n\n```{r}\nmean(sample_means)\n```\nwhich is very close to the population mean of $\\mu =0$\n\n\nwith standard error \n\n```{r}\nsd(sample_means)\n```\n\nwhich is approximately $\\frac{\\sigma}{\\sqrt{n}} = \\frac{1}{10}$\n\nBelow is a demonstration of how increasing the sample size affects the distribution of the sample mean and seeing *CLT* in action\n\n<details>\n<summary>Show Code</summary>\n```{r}\nn_samples <- 100\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist100 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~100)\n```\n\n\n```{r}\nn_samples <- 1000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist1000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~1000)\n```\n\n```{r}\nn_samples <- 5000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist5000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~5000)\n```\n\n\n```{r}\nn_samples <- 10000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist10000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~10000)\n```\n\n\n```{r}\nplots <- sampling_dist100 + sampling_dist1000 + sampling_dist5000 +\n  sampling_dist10000 + plot_layout(nrow=2, ncol=2)\n```\n\n</details>\n\n\n```{r,echo=FALSE,fig.height=7,fig.width=9}\nplots\n```\n\n\nTo interactively visualize how the sampling distribution of the \nsample mean builds up one sample at a time and see when the Central Limit Theorem start to kick in, I highly recommend the [art of stats](https://artofstat.com/web-apps) sampling distributions and Central Limit Theorem web applications.\n\n\n### Application: Sample Mean\n\nNow we will apply the the concepts of generating a sampling distribution for the sample mean using a real world dataset. In particular, we will use the `penguins` dataset from the `palmerpenguins` package.\n\nUsing the penguins dataset we will generate a sampling distribution for the sample mean of the penguins' body mass *(grams)*\n\nFor simplicity, we will remove any missing observations\n\n```{r}\nbody_mass_g <- penguins$body_mass_g[!is.na(penguins$body_mass_g)]\n```\n\nRecall, to obtain the sampling distribution for the sample mean, do the following process\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population, `penguins$body_mass_g`\n(2) Compute the sample mean of the penguins body mass and store the result in a variable, say `body_mass_xbar`\n(3) Plot each of the `body_mass_xbar` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 50\n\nbody_mass_xbar <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  sample(body_mass_g, size = sample_size) # generate a new sample\n  body_mass_xbar[i] = mean(sample_i) # obtain mean for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(body_mass_xbar),\n                        aes(body_mass_xbar))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution of Sample Mean',\n       subtitle = 'Penguins body mass (grams)',\n       x = 'Sample means',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe mean for the sampling distribution is\n\n```{r}\nmean(body_mass_xbar)\n```\n\nwhich is approximately the population mean for the penguins body mass *(without missing observations)*\n\n```{r}\nmean(body_mass_g)\n```\n\nthe standard error for the sampling distribution is\n\n```{r}\nsd(body_mass_xbar)\n```\n\n\n\n\n### Sample proportions\n\nThe idea behind generating a sampling distribution for sample proportions is very similar to the procedure described in [Sample means](#sample-mean) section.\n\nTo obtain the sampling distribution for the sample proportions;\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population\n(2) Compute the sample proportion and store the result in a variable, say `sample_proportions`\n(3) Plot each of the `sample_proportions` using a histogram\n\nHere the sample proportion is the fraction of samples which were success. We will take a large number of random samples from the population, where the population is generated from a binomial distribution with 10 trials and probability of success $p=0.25$ for each trial.\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 100 # each sample will be of size 100\nn_trials <- 10\nsample_proportions <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rbinom(n = sample_size, size= n_trials, \n                     prob = 0.25) # generate a new sample\n  sample_proportions[i] = mean(sample_i)/n_trials # obtain proportion for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist_prop <- ggplot(data.frame(sample_proportions),\n                             aes(sample_proportions))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample proportions',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist_prop\n```\n\nThe plot above is the distribution of sample proportions after taking 10,000 samples with size $n=100$ from the population. The overall distribution appears to be normally distributed *(bell shaped curve)*.\n\n\nThrough the *CLT*, the sampling distribution for the sample proportions will be distributed with mean $p$ and standard error $\\sqrt{\\frac{p(1-p)}{n}}$, $\\hat{p} \\sim N(p,\\sqrt{\\frac{p(1-p)}{n}} )$\n\n\n```{r}\nmean(sample_proportions)\n```\n\nwhich is approximately the population parameter $p=0.25$.\n\nThe standard error is \n\n```{r}\nsd(sample_proportions)\n```\n\n\n\n### Application: Sample proportion\n\n\nUsing the penguins dataset we will generate a sampling distribution for the sample proportion of the Adelie penguins\n\nFor simplicity, we will remove any missing observations\n\n```{r}\nspecies <- penguins$species[!is.na(penguins$species)]\n```\n\nRecall, to obtain the sampling distribution for the sample proportion\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population, `penguins$species` *(without missing observations)*\n(2) Compute the sample proportion of the penguins Adelie species and store the result in a variable, say `adelie_proportions`\n(3) Plot each of the `adelie_proportions` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 50\n\nadelie_proportions <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  sample(species, size = sample_size) # generate a new sample from the population\n  adelie_proportions[i] = mean(sample_i == 'Adelie') # obtain proportion for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(adelie_proportions),\n                        aes(adelie_proportions))+\n  geom_bar(fill = 'steelblue',alpha = 0.3,\n                 color = 'black')+\n  labs(title = 'Sampling distribution of Sample Proportion',\n       subtitle = \"Adelie penguins\",\n       x = 'Sample proportions',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe mean for the sampling distribution is\n\n```{r}\nmean(adelie_proportions)\n```\n\nwhich is approximately the population proportion for the Adelie penguins *(without missing observations)*\n\n```{r}\nprop.table(table(species))['Adelie']\n```\n\nthe standard error for the sampling distribution is\n\n```{r}\nsd(adelie_proportions)\n```\n\nwhich should approximately be $\\sqrt{\\frac{p(1-p)}{n}}$\n\n```{r}\np <- prop.table(table(species))['Adelie']\nsqrt((p*(1-p))/sample_size)\n```\n\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.width = 6,\n  fig.height = 4,\n  warning = FALSE,\n  eval = TRUE\n)\n```\n\n\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(palmerpenguins)\n```\n\n```{r}\ntheme_set(theme_bw())\ntheme_replace(panel.grid.minor = element_blank(),\n              panel.grid.major = element_blank())\n```\n\n\n\n## Sampling Distributions\n\n### Sample mean\n\nThe sampling distribution of the sample mean is the theoretical distribution of means that would result from taking all possible samples of size $n$ from the population.\n\nSuppose we are sampling from a population which comes from a standard Normal distribution such that observations in our sample are *iid (independent, identically distributed)*. Each sample of size $n$ will then consists of realizations $\\{x_1,\\dots,x_n\\}$, such that each $x_i$ will be a realization of the random variable $X_i \\sim N(0,1)$\n\nTo obtain the sampling distribution for the sample mean,\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population\n(2) Compute the sample mean and store the result in a variable, say `sample_means`\n(3) Plot each of the `sample_means` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 100 # each sample will be of size 100\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = sample_size, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe plot above is the distribution of sample means after taking 10,000 samples with size $n=100$ from the population. The overall distribution appears to be normally distributed *(bell shaped curve)*.\n\n\nThe **Central Limit Theorem** *(CLT)* states that if you have a population with mean $\\mu$ and standard deviation $\\sigma$ and take sufficiently large random samples from the population with replacement, then the distribution of the sample means *(sampling distribution)* will be approximately normally distributed with mean $\\mu$ and standard error $\\frac{\\sigma}{\\sqrt{n}}$. Note, the standard deviation of the sampling distribution of the sample mean *(or any other statistic)* is referred to as the *standard error*.\n\nRecall, the population is distributed as a standard normal distribution, i.e $N(\\mu=0,\\sigma=1)$\n\n```{r}\nmean(sample_means)\n```\nwhich is very close to the population mean of $\\mu =0$\n\n\nwith standard error \n\n```{r}\nsd(sample_means)\n```\n\nwhich is approximately $\\frac{\\sigma}{\\sqrt{n}} = \\frac{1}{10}$\n\nBelow is a demonstration of how increasing the sample size affects the distribution of the sample mean and seeing *CLT* in action\n\n<details>\n<summary>Show Code</summary>\n```{r}\nn_samples <- 100\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist100 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~100)\n```\n\n\n```{r}\nn_samples <- 1000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist1000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~1000)\n```\n\n```{r}\nn_samples <- 5000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist5000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~5000)\n```\n\n\n```{r}\nn_samples <- 10000\nsample_means <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rnorm(n = n_samples, mean = 0, sd=1) # generate a new sample\n  sample_means[i] = mean(sample_i) # obtain mean for each sample\n}\n\nsample_mean <- round(mean(sample_means),3)\nstandard_error <- round(sd(sample_means),3)\n\nsampling_dist10000 <- ggplot(data.frame(sample_means),aes(sample_means))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample means',y = '',\n       subtitle = paste0('mean=',sample_mean,\n                         ', standard error=',standard_error))+\n  facet_grid(~10000)\n```\n\n\n```{r}\nplots <- sampling_dist100 + sampling_dist1000 + sampling_dist5000 +\n  sampling_dist10000 + plot_layout(nrow=2, ncol=2)\n```\n\n</details>\n\n\n```{r,echo=FALSE,fig.height=7,fig.width=9}\nplots\n```\n\n\nTo interactively visualize how the sampling distribution of the \nsample mean builds up one sample at a time and see when the Central Limit Theorem start to kick in, I highly recommend the [art of stats](https://artofstat.com/web-apps) sampling distributions and Central Limit Theorem web applications.\n\n\n### Application: Sample Mean\n\nNow we will apply the the concepts of generating a sampling distribution for the sample mean using a real world dataset. In particular, we will use the `penguins` dataset from the `palmerpenguins` package.\n\nUsing the penguins dataset we will generate a sampling distribution for the sample mean of the penguins' body mass *(grams)*\n\nFor simplicity, we will remove any missing observations\n\n```{r}\nbody_mass_g <- penguins$body_mass_g[!is.na(penguins$body_mass_g)]\n```\n\nRecall, to obtain the sampling distribution for the sample mean, do the following process\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population, `penguins$body_mass_g`\n(2) Compute the sample mean of the penguins body mass and store the result in a variable, say `body_mass_xbar`\n(3) Plot each of the `body_mass_xbar` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 50\n\nbody_mass_xbar <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  sample(body_mass_g, size = sample_size) # generate a new sample\n  body_mass_xbar[i] = mean(sample_i) # obtain mean for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(body_mass_xbar),\n                        aes(body_mass_xbar))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution of Sample Mean',\n       subtitle = 'Penguins body mass (grams)',\n       x = 'Sample means',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe mean for the sampling distribution is\n\n```{r}\nmean(body_mass_xbar)\n```\n\nwhich is approximately the population mean for the penguins body mass *(without missing observations)*\n\n```{r}\nmean(body_mass_g)\n```\n\nthe standard error for the sampling distribution is\n\n```{r}\nsd(body_mass_xbar)\n```\n\n\n\n\n### Sample proportions\n\nThe idea behind generating a sampling distribution for sample proportions is very similar to the procedure described in [Sample means](#sample-mean) section.\n\nTo obtain the sampling distribution for the sample proportions;\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population\n(2) Compute the sample proportion and store the result in a variable, say `sample_proportions`\n(3) Plot each of the `sample_proportions` using a histogram\n\nHere the sample proportion is the fraction of samples which were success. We will take a large number of random samples from the population, where the population is generated from a binomial distribution with 10 trials and probability of success $p=0.25$ for each trial.\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 100 # each sample will be of size 100\nn_trials <- 10\nsample_proportions <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  rbinom(n = sample_size, size= n_trials, \n                     prob = 0.25) # generate a new sample\n  sample_proportions[i] = mean(sample_i)/n_trials # obtain proportion for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist_prop <- ggplot(data.frame(sample_proportions),\n                             aes(sample_proportions))+\n  geom_histogram(fill = 'steelblue',alpha = 0.3,\n                 color = 'black',bins=30)+\n  labs(title = 'Sampling distribution',\n       x = 'Sample proportions',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist_prop\n```\n\nThe plot above is the distribution of sample proportions after taking 10,000 samples with size $n=100$ from the population. The overall distribution appears to be normally distributed *(bell shaped curve)*.\n\n\nThrough the *CLT*, the sampling distribution for the sample proportions will be distributed with mean $p$ and standard error $\\sqrt{\\frac{p(1-p)}{n}}$, $\\hat{p} \\sim N(p,\\sqrt{\\frac{p(1-p)}{n}} )$\n\n\n```{r}\nmean(sample_proportions)\n```\n\nwhich is approximately the population parameter $p=0.25$.\n\nThe standard error is \n\n```{r}\nsd(sample_proportions)\n```\n\n\n\n### Application: Sample proportion\n\n\nUsing the penguins dataset we will generate a sampling distribution for the sample proportion of the Adelie penguins\n\nFor simplicity, we will remove any missing observations\n\n```{r}\nspecies <- penguins$species[!is.na(penguins$species)]\n```\n\nRecall, to obtain the sampling distribution for the sample proportion\n\nFor the total number of samples do the following:\n\n(1) Generate a random sample of size $n$ from the population, `penguins$species` *(without missing observations)*\n(2) Compute the sample proportion of the penguins Adelie species and store the result in a variable, say `adelie_proportions`\n(3) Plot each of the `adelie_proportions` using a histogram\n\n\n```{r}\nn_samples <- 10000\nsample_size <- 50\n\nadelie_proportions <- numeric(n_samples)\n\nfor(i in 1:n_samples){\n  sample_i =  sample(species, size = sample_size) # generate a new sample from the population\n  adelie_proportions[i] = mean(sample_i == 'Adelie') # obtain proportion for each sample\n}\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nsampling_dist <- ggplot(data.frame(adelie_proportions),\n                        aes(adelie_proportions))+\n  geom_bar(fill = 'steelblue',alpha = 0.3,\n                 color = 'black')+\n  labs(title = 'Sampling distribution of Sample Proportion',\n       subtitle = \"Adelie penguins\",\n       x = 'Sample proportions',y = '')\n```\n</details>\n\n\n```{r,echo=FALSE}\nsampling_dist\n```\n\nThe mean for the sampling distribution is\n\n```{r}\nmean(adelie_proportions)\n```\n\nwhich is approximately the population proportion for the Adelie penguins *(without missing observations)*\n\n```{r}\nprop.table(table(species))['Adelie']\n```\n\nthe standard error for the sampling distribution is\n\n```{r}\nsd(adelie_proportions)\n```\n\nwhich should approximately be $\\sqrt{\\frac{p(1-p)}{n}}$\n\n```{r}\np <- prop.table(table(species))['Adelie']\nsqrt((p*(1-p))/sample_size)\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"fig-align":"center","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"reference-location":"document","output-file":"10-CLT.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":["sandstone","../assets/styles.scss"],"published-title":"last updated","code-summary":"","author":"Jose Toledo Luna","date":"October 27, 2023","title":"Introduction to Central Limit Theorem"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}