{"title":"Normal Distribution","markdown":{"yaml":{"author":"Jose Toledo Luna","date":"November 09, 2023","title":"Normal Distribution","toc":true},"headingText":"Normal Distribution","containsRefs":false,"markdown":"\n\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.width = 6,\n  fig.height = 4,\n  warning = FALSE,\n  eval = TRUE\n)\n```\n\n<details>\n<summary>Required Packages</summary>\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n\n\n```{r}\ntheme_set(theme_bw())\ntheme_replace(panel.grid.minor = element_blank(),\n              panel.grid.major = element_blank())\n```\n</details>\n\n---\n\n\n\nOne of the most important and widely used continuous distribution is the Normal distribution, or Gaussian distribution.\n\nLet $X \\sim N(\\mu,\\sigma)$ be a random variable following a normal distribution with mean $\\mu$ and standard deviation $\\sigma$. In R, the following functions described in the table below, allows us to summarize the function relating to the normal distribution\n\n+----------+----------------------------------------------+\n| Function | Description                                  |\n+==========+==============================================+\n| dnorm    | Normal density\\                              |\n|          | (Probability Density Function)               |\n+----------+----------------------------------------------+\n| pnorm    | Normal distribution\\                         |\n|          | (Cumulative Distribution Function)           |\n+----------+----------------------------------------------+\n| qnorm    | Quantile function of the Normal distribution |\n+----------+----------------------------------------------+\n| rnorm    | Normal random number generation              |\n+----------+----------------------------------------------+\n\n\nBy default, all of the functions above consider the standard Normal distribution, which has a mean of zero and a standard deviation of one, $X \\sim N(0,1)$\n\n\n### dnorm\n\nThe density function for a normal distribution with mean $\\mu$ and standard deviation $\\sigma$ is \n\n$$\nf(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\exp{\\left(\n-\\frac{1}{2\\sigma^2 }(x-\\mu)^2\n\\right)}\n$$\nfor $-\\infty < x < \\infty$\n\nWe can use `dnorm()` function to calculate the density function, i.e $f(x)$, for a grid of $x$ values from any normal distribution with mean $\\mu$ and standard deviation $\\sigma$\n\nFor example, we can calculate $f(0)$ from a standard normal distribution\n\n```{r}\ndnorm(x = 0,mean = 0,sd = 1)\n```\n\nConsider evaluating $f(x)$ for $x \\in [1,10]$ with mean 1 and standard deviation of 3\n\n```{r}\ndnorm(x=1:10,mean = 1,sd = 3)\n```\n\n\n### pnorm\n\nThe `pnorm()` function gives the Cumulative Distribution Function *(CDF)* of the Normal distribution, which is the probability that the variable $X$ takes a value less than or equal to $x$.\nMathematically, $F_X(x) = P(X \\leq x)$. \n\n\nFor any continuous distribution $P(X = x)=0$, so equivalently the *CDF* is $P(X \\leq x) = P(X < x)$.\n\n\nConsider the standard normal distribution, since this distribution is symmetrical centered around $\\mu=0$ then $P(X \\leq 0) = 0.5$. We can verify this result using `pnorm` as follows\n\n```{r}\npnorm(0,mean = 0, sd = 1)\n```\n\n\n**Example:** Suppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111. What is the probability of scoring less than 700 on the SAT-M?\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nprob1 <- round(pnorm(700, mean=507, sd=111) * 100,2)\nplt1 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(mean = 507,sd = 111)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(150, 700),\n                args = list(mean = 507,sd = 111))+\n  annotate(\"text\", x = 510, y = 0.0015, \n           label = paste0(prob1,'%'),\n           size = 8)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n\n</details>\n\n```{r,echo=FALSE}\nplt1\n```\n\n\nThat is $P(X < 700)$,\n\n```{r}\npnorm(700, mean=507, sd=111)\n```\n\n\nWhat about the probability of scoring greater than 700?\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nprob2 <- round(pnorm(700, mean=507, sd=111,\n                     lower.tail = FALSE)*100,2)\n\np2 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(mean = 507,sd = 111)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(700, 900),\n                args = list(mean = 507,sd = 111))+\n  annotate(\"text\", x = 738, y = 0.00017, \n           label = paste0(prob2,'%'),\n           size=4.7)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n\n</details>\n\n```{r,echo=FALSE}\np2\n```\n\n\nWe are interested $P(X > 700)$, which can be obtained through $P(X > 700) = 1- P(X \\leq 700)$ \n\n```{r}\n1-pnorm(700, mean = 507, sd = 111)\n```\n\nAlternative, `pnorm()` has an argument `lower.tail=TRUE` *(by default)*.\nIf `lower.tail=TRUE`, the probabilities $P(X \\leq x)$ are returned.\nOtherwise, if `lower.tail=FALSE`, $P(X > x)$  are returned\n\n```{r}\npnorm(700, mean = 507, sd = 111, lower.tail = FALSE)\n```\n\n\nThe Empirical rule *(also known as the 68-95-99.7 rule)* is a statistical rule stating that for a normal distribution, where most of the data will fall within three standard deviations of the mean. The empirical rule can be broken down into three parts: 68% of data falls within the first standard deviation from the mean *(blue shaded region)*. 95% fall within the 2nd standard deviations *(up to the green shaded region)*. 99.7% fall within third standard deviation *(up to the red shaded region)*\n\n\n<details>\n\n<summary>Show Code</summary>\n```{r}\nx_limits <- c(-4,4)\n```\n\n```{r}\nplot_shaded_normal <- function(shade_limits,percent_display,\n                               annotate_x_label,annotate_y_label,\n                               x_limits = c(-4,4),\n                               fill = 'steelblue',\n                               alpha = 0.3,annotate_label_size=4.5){\n  plt <- ggplot(data.frame(x = x_limits), aes(x)) +\n    stat_function(fun = dnorm,geom = \"line\",xlim = x_limits) +\n    stat_function(fun = dnorm,geom = \"area\",fill = fill,alpha =alpha,\n                  xlim = shade_limits)+\n    labs(x = '',y= 'Density')+\n    annotate(\"text\", x = annotate_x_label, y = annotate_y_label, \n             label = paste0(percent_display,'%'),\n             size=annotate_label_size)+\n    scale_x_continuous(name = '',limits = x_limits,\n                       breaks = x_limits[1]:x_limits[2])\n  return(plt)\n}\n```\n\n\n```{r}\nplots <- plot_shaded_normal(shade_limits = c(-1,1),\n                            percent_display = 68,\n                            annotate_x_label = 0.1,annotate_y_label = 0.15)+\n  plot_shaded_normal(shade_limits = c(-2, 2),fill='green',\n                     percent_display = 95,\n                     annotate_x_label = 0,annotate_y_label = 0.15)+\n  plot_shaded_normal(shade_limits = c(-3, 3),fill='red',\n                     percent_display = 99.7,\n                     annotate_x_label = 0.1,annotate_y_label = 0.15)+\n  plot_annotation(title = '68–95–99.7 Rule')\n```\n\n\n\n</details>\n\n```{r,echo=FALSE,fig.width=8, fig.height=5}\nplots\n```\n\nWe can easily verify these results using `pnorm`. Assuming a standard Normal distribution if we were one standard deviation away from the mean then \n\n```{r}\npnorm(1)-pnorm(-1)\n```\n\nIf we were two standard deviations away from the mean\n\n```{r}\npnorm(2) - pnorm(-2)\n```\n\nand lastly, three standard deviations away from the mean \n\n```{r}\npnorm(3) - pnorm(-3)\n```\n\n\n### qnorm\n\nThe function `qnorm()` returns the value of the inverse cumulative density function *(CDF)* of the normal distribution with specified mean $\\mu$ and standard deviation $\\sigma$. \n\nLet $F_X(x) = P(X \\leq x)$ be the *CDF* of the normal distribution, and suppose it returns the probability $p$, i.e, $F_X(x) = p$. The inverse of the *CDF* or *(quantile function)* tells you what $x$ would make $F_X(x)$ return some probability $p$;\n\n$$F_X^{-1}(p) = x$$\nFor example, for the standard normal distribution\n$F_X(0)=P(X \\leq 0) = 0.5$. That is, the value of $x$ or *(quantile)* which gives us a cumulative probability of 0.5 is $x=0$. \n\nTherefore, we can use the `qnorm()` function to find out what value of $x$ or *(quantile)* gives us a\na cumulative probability of $p$. Hence, the `qnorm` function is the inverse of the `pnorm` function\n\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nx_limits <- c(-4,4)\n\np1 <- ggplot(data.frame(x = x_limits), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(-4, 0))+\n  geom_vline(xintercept = 0,linetype=2,color = '#cf5d55')+\n  labs(x = '',y= 'Density')+\n  annotate('text', x = -0.65, y = 0.17, \n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]),'(0)==0.5') )+\n  annotate('text',x = 0.77, y = 0.41,\n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]^{-1}),' *(0.5)==0'),\n           color = '#cf5d55')+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n\n```\n\n</details>\n\n```{r,echo=FALSE}\np1\n```\n\n```{r}\nqnorm(p=0.5)\n```\n\nGoing back to our example of the SAT-M scores.\nSuppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111.\nRecall the probability of obtaining a score less than 700 on the SAT-M was $P(X < 700) = 0.9589596$. \nTherefore, if we were interesting in finding the score or *(quantile)* which gives us a cumulative probability of roughly 96\\% we can use `qnorm` as follows:\n\n```{r}\nqnorm(0.9589596, mean=507, sd=111)\n```\n\nWe should see that the output value is exactly 700.\n\n\n\n### rnorm\n\nThe `rnorm` function generates $n$ observations from a Normal distribution with mean $\\mu$ and standard deviation $\\sigma$.\n\nWe specify a seed for reproducibility,\n```{r}\nset.seed(10)\n```\n\nLet's start by generate 10 random observations from a standard normal distribution\n```{r}\nrnorm(10, mean = 0, sd = 1)\n```\n\nor equivalently,\n```{r}\nrnorm(10)\n```\n\nWe can specify a different mean and standard deviation \n\n```{r}\nrnorm(10, mean = 10, sd = 2)\n```\n\nIn the following plot we generate $n=100,1000,10000$ random observations from a standard normal distribution.\nIf we increase the number of observations, we see the data will approach the true Normal density function \n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nplot_random_normal <- function(n_samples, mean = 0, sd = 1,\n                               fill = 'steelblue', alpha = 0.3,\n                               bins = 30, density_linewidth = 1.2,\n                               density_linetype = 2){\n  \n  plt <- ggplot(data = data.frame(x=rnorm(n_samples,mean = mean, sd = sd),\n                                  n_samples),aes(x))+\n    geom_histogram(aes(y = after_stat(density)),\n                   colour = 1, fill = fill,\n                   alpha = alpha,\n                   bins=bins) +\n    geom_density(linewidth = density_linewidth,\n                 linetype = density_linetype,\n                 colour = 2)+\n    labs(x= '',y = 'density')+\n    facet_grid(~n_samples)\n  return(plt)\n}\n```\n\n\n```{r}\nplots <- plot_random_normal(n_samples = 100)+\n  plot_random_normal(n_samples = 1000)+\n  plot_random_normal(n_samples = 10000)+\n  plot_layout(ncol=3)\n```\n\n</details>\n\n\n```{r,echo=FALSE,fig.width=8,fig.height=5}\nplots\n```\n\n\n\n\n\n## Standardizing Values\n\nThe normal model $N(0,1)$ is called the standard normal distribution, and it is the default model used when working with `(.)norm` functions\n\n\nA $z$-score, also known as a standard score, quantifies the number of standard deviations a data point is from the mean of a distribution. This can be useful for comparing and analyzing data across different scales or distributions, providing a standardized way to assess the relative position of a particular value within a dataset\n\nFor example, consider a scenario where you are comparing the performance of students in two different subjects, one with scores ranging from 0 to 100 and another with scores ranging from 0 to 50. Without standardization, it can be challenging to assess which student has performed relatively better across both subjects.\n\n\nThe $z$-score of a particular value is defined as \n$$\nz = \\frac{\\text{value} - \\text{mean}}{\\text{standard deviation}}\n$$\nIf the values in their original units of measurement follow a normal distribution, then the $z$-scores will follow a standard normal distribution\n\nRecall the SAT-M scores example: Suppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111. What is the probability of scoring less than 700 on the SAT-M?\n\n\n```{r}\npnorm(700, mean = 507, sd = 111)\n```\n\n\nWe can also compute this quantity with the $z$-score with respect to the standard normal distribution\n$$\n\\begin{align*}\nz &= \\frac{\\text{value} - \\text{mean}}{\\text{standard deviation}} \\\\[10pt]\nz &= \\frac{700 - 507}{111} \\\\[10pt]\nz &= 1.738739\n\\end{align*}\n$$\n```{r}\nz <- (700-507)/111\npnorm(z)\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nprob2 <- round(z * 100,2)\np2 <- ggplot(data.frame(x = c(-4,4)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(-4,4),\n                args = list(mean = 0,sd = 1)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'red',\n                alpha =0.3,\n                xlim = c(-4, z),\n                args = list(mean = 0,sd = 1))+\n  annotate(\"text\", x = (510-507)/111, y = 0.15, \n           label = paste0(prob1,'%'),\n           size = 8)+\n  geom_vline(xintercept = z,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n</details>\n\n\n```{r,fig.width=6,echo=FALSE}\np2\n```\n\n\nBy standardizing the scores, we shift from calculating $P(X < 700)$ where the units are in SAT-M scores to equivalently computing $P(Z < 1.738739)$. This represents the number of standard deviations a data point is from the mean of the distribution. By standardizing we can now compare these results with say scores obtained from an english SAT exam on the same scale\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.width = 6,\n  fig.height = 4,\n  warning = FALSE,\n  eval = TRUE\n)\n```\n\n<details>\n<summary>Required Packages</summary>\n```{r}\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n\n\n```{r}\ntheme_set(theme_bw())\ntheme_replace(panel.grid.minor = element_blank(),\n              panel.grid.major = element_blank())\n```\n</details>\n\n---\n\n\n## Normal Distribution\n\nOne of the most important and widely used continuous distribution is the Normal distribution, or Gaussian distribution.\n\nLet $X \\sim N(\\mu,\\sigma)$ be a random variable following a normal distribution with mean $\\mu$ and standard deviation $\\sigma$. In R, the following functions described in the table below, allows us to summarize the function relating to the normal distribution\n\n+----------+----------------------------------------------+\n| Function | Description                                  |\n+==========+==============================================+\n| dnorm    | Normal density\\                              |\n|          | (Probability Density Function)               |\n+----------+----------------------------------------------+\n| pnorm    | Normal distribution\\                         |\n|          | (Cumulative Distribution Function)           |\n+----------+----------------------------------------------+\n| qnorm    | Quantile function of the Normal distribution |\n+----------+----------------------------------------------+\n| rnorm    | Normal random number generation              |\n+----------+----------------------------------------------+\n\n\nBy default, all of the functions above consider the standard Normal distribution, which has a mean of zero and a standard deviation of one, $X \\sim N(0,1)$\n\n\n### dnorm\n\nThe density function for a normal distribution with mean $\\mu$ and standard deviation $\\sigma$ is \n\n$$\nf(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\exp{\\left(\n-\\frac{1}{2\\sigma^2 }(x-\\mu)^2\n\\right)}\n$$\nfor $-\\infty < x < \\infty$\n\nWe can use `dnorm()` function to calculate the density function, i.e $f(x)$, for a grid of $x$ values from any normal distribution with mean $\\mu$ and standard deviation $\\sigma$\n\nFor example, we can calculate $f(0)$ from a standard normal distribution\n\n```{r}\ndnorm(x = 0,mean = 0,sd = 1)\n```\n\nConsider evaluating $f(x)$ for $x \\in [1,10]$ with mean 1 and standard deviation of 3\n\n```{r}\ndnorm(x=1:10,mean = 1,sd = 3)\n```\n\n\n### pnorm\n\nThe `pnorm()` function gives the Cumulative Distribution Function *(CDF)* of the Normal distribution, which is the probability that the variable $X$ takes a value less than or equal to $x$.\nMathematically, $F_X(x) = P(X \\leq x)$. \n\n\nFor any continuous distribution $P(X = x)=0$, so equivalently the *CDF* is $P(X \\leq x) = P(X < x)$.\n\n\nConsider the standard normal distribution, since this distribution is symmetrical centered around $\\mu=0$ then $P(X \\leq 0) = 0.5$. We can verify this result using `pnorm` as follows\n\n```{r}\npnorm(0,mean = 0, sd = 1)\n```\n\n\n**Example:** Suppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111. What is the probability of scoring less than 700 on the SAT-M?\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nprob1 <- round(pnorm(700, mean=507, sd=111) * 100,2)\nplt1 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(mean = 507,sd = 111)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(150, 700),\n                args = list(mean = 507,sd = 111))+\n  annotate(\"text\", x = 510, y = 0.0015, \n           label = paste0(prob1,'%'),\n           size = 8)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n\n</details>\n\n```{r,echo=FALSE}\nplt1\n```\n\n\nThat is $P(X < 700)$,\n\n```{r}\npnorm(700, mean=507, sd=111)\n```\n\n\nWhat about the probability of scoring greater than 700?\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nprob2 <- round(pnorm(700, mean=507, sd=111,\n                     lower.tail = FALSE)*100,2)\n\np2 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(mean = 507,sd = 111)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(700, 900),\n                args = list(mean = 507,sd = 111))+\n  annotate(\"text\", x = 738, y = 0.00017, \n           label = paste0(prob2,'%'),\n           size=4.7)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n\n</details>\n\n```{r,echo=FALSE}\np2\n```\n\n\nWe are interested $P(X > 700)$, which can be obtained through $P(X > 700) = 1- P(X \\leq 700)$ \n\n```{r}\n1-pnorm(700, mean = 507, sd = 111)\n```\n\nAlternative, `pnorm()` has an argument `lower.tail=TRUE` *(by default)*.\nIf `lower.tail=TRUE`, the probabilities $P(X \\leq x)$ are returned.\nOtherwise, if `lower.tail=FALSE`, $P(X > x)$  are returned\n\n```{r}\npnorm(700, mean = 507, sd = 111, lower.tail = FALSE)\n```\n\n\nThe Empirical rule *(also known as the 68-95-99.7 rule)* is a statistical rule stating that for a normal distribution, where most of the data will fall within three standard deviations of the mean. The empirical rule can be broken down into three parts: 68% of data falls within the first standard deviation from the mean *(blue shaded region)*. 95% fall within the 2nd standard deviations *(up to the green shaded region)*. 99.7% fall within third standard deviation *(up to the red shaded region)*\n\n\n<details>\n\n<summary>Show Code</summary>\n```{r}\nx_limits <- c(-4,4)\n```\n\n```{r}\nplot_shaded_normal <- function(shade_limits,percent_display,\n                               annotate_x_label,annotate_y_label,\n                               x_limits = c(-4,4),\n                               fill = 'steelblue',\n                               alpha = 0.3,annotate_label_size=4.5){\n  plt <- ggplot(data.frame(x = x_limits), aes(x)) +\n    stat_function(fun = dnorm,geom = \"line\",xlim = x_limits) +\n    stat_function(fun = dnorm,geom = \"area\",fill = fill,alpha =alpha,\n                  xlim = shade_limits)+\n    labs(x = '',y= 'Density')+\n    annotate(\"text\", x = annotate_x_label, y = annotate_y_label, \n             label = paste0(percent_display,'%'),\n             size=annotate_label_size)+\n    scale_x_continuous(name = '',limits = x_limits,\n                       breaks = x_limits[1]:x_limits[2])\n  return(plt)\n}\n```\n\n\n```{r}\nplots <- plot_shaded_normal(shade_limits = c(-1,1),\n                            percent_display = 68,\n                            annotate_x_label = 0.1,annotate_y_label = 0.15)+\n  plot_shaded_normal(shade_limits = c(-2, 2),fill='green',\n                     percent_display = 95,\n                     annotate_x_label = 0,annotate_y_label = 0.15)+\n  plot_shaded_normal(shade_limits = c(-3, 3),fill='red',\n                     percent_display = 99.7,\n                     annotate_x_label = 0.1,annotate_y_label = 0.15)+\n  plot_annotation(title = '68–95–99.7 Rule')\n```\n\n\n\n</details>\n\n```{r,echo=FALSE,fig.width=8, fig.height=5}\nplots\n```\n\nWe can easily verify these results using `pnorm`. Assuming a standard Normal distribution if we were one standard deviation away from the mean then \n\n```{r}\npnorm(1)-pnorm(-1)\n```\n\nIf we were two standard deviations away from the mean\n\n```{r}\npnorm(2) - pnorm(-2)\n```\n\nand lastly, three standard deviations away from the mean \n\n```{r}\npnorm(3) - pnorm(-3)\n```\n\n\n### qnorm\n\nThe function `qnorm()` returns the value of the inverse cumulative density function *(CDF)* of the normal distribution with specified mean $\\mu$ and standard deviation $\\sigma$. \n\nLet $F_X(x) = P(X \\leq x)$ be the *CDF* of the normal distribution, and suppose it returns the probability $p$, i.e, $F_X(x) = p$. The inverse of the *CDF* or *(quantile function)* tells you what $x$ would make $F_X(x)$ return some probability $p$;\n\n$$F_X^{-1}(p) = x$$\nFor example, for the standard normal distribution\n$F_X(0)=P(X \\leq 0) = 0.5$. That is, the value of $x$ or *(quantile)* which gives us a cumulative probability of 0.5 is $x=0$. \n\nTherefore, we can use the `qnorm()` function to find out what value of $x$ or *(quantile)* gives us a\na cumulative probability of $p$. Hence, the `qnorm` function is the inverse of the `pnorm` function\n\n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nx_limits <- c(-4,4)\n\np1 <- ggplot(data.frame(x = x_limits), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(-4, 0))+\n  geom_vline(xintercept = 0,linetype=2,color = '#cf5d55')+\n  labs(x = '',y= 'Density')+\n  annotate('text', x = -0.65, y = 0.17, \n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]),'(0)==0.5') )+\n  annotate('text',x = 0.77, y = 0.41,\n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]^{-1}),' *(0.5)==0'),\n           color = '#cf5d55')+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n\n```\n\n</details>\n\n```{r,echo=FALSE}\np1\n```\n\n```{r}\nqnorm(p=0.5)\n```\n\nGoing back to our example of the SAT-M scores.\nSuppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111.\nRecall the probability of obtaining a score less than 700 on the SAT-M was $P(X < 700) = 0.9589596$. \nTherefore, if we were interesting in finding the score or *(quantile)* which gives us a cumulative probability of roughly 96\\% we can use `qnorm` as follows:\n\n```{r}\nqnorm(0.9589596, mean=507, sd=111)\n```\n\nWe should see that the output value is exactly 700.\n\n\n\n### rnorm\n\nThe `rnorm` function generates $n$ observations from a Normal distribution with mean $\\mu$ and standard deviation $\\sigma$.\n\nWe specify a seed for reproducibility,\n```{r}\nset.seed(10)\n```\n\nLet's start by generate 10 random observations from a standard normal distribution\n```{r}\nrnorm(10, mean = 0, sd = 1)\n```\n\nor equivalently,\n```{r}\nrnorm(10)\n```\n\nWe can specify a different mean and standard deviation \n\n```{r}\nrnorm(10, mean = 10, sd = 2)\n```\n\nIn the following plot we generate $n=100,1000,10000$ random observations from a standard normal distribution.\nIf we increase the number of observations, we see the data will approach the true Normal density function \n\n<details>\n\n<summary>Show Code</summary>\n\n```{r}\nplot_random_normal <- function(n_samples, mean = 0, sd = 1,\n                               fill = 'steelblue', alpha = 0.3,\n                               bins = 30, density_linewidth = 1.2,\n                               density_linetype = 2){\n  \n  plt <- ggplot(data = data.frame(x=rnorm(n_samples,mean = mean, sd = sd),\n                                  n_samples),aes(x))+\n    geom_histogram(aes(y = after_stat(density)),\n                   colour = 1, fill = fill,\n                   alpha = alpha,\n                   bins=bins) +\n    geom_density(linewidth = density_linewidth,\n                 linetype = density_linetype,\n                 colour = 2)+\n    labs(x= '',y = 'density')+\n    facet_grid(~n_samples)\n  return(plt)\n}\n```\n\n\n```{r}\nplots <- plot_random_normal(n_samples = 100)+\n  plot_random_normal(n_samples = 1000)+\n  plot_random_normal(n_samples = 10000)+\n  plot_layout(ncol=3)\n```\n\n</details>\n\n\n```{r,echo=FALSE,fig.width=8,fig.height=5}\nplots\n```\n\n\n\n\n\n## Standardizing Values\n\nThe normal model $N(0,1)$ is called the standard normal distribution, and it is the default model used when working with `(.)norm` functions\n\n\nA $z$-score, also known as a standard score, quantifies the number of standard deviations a data point is from the mean of a distribution. This can be useful for comparing and analyzing data across different scales or distributions, providing a standardized way to assess the relative position of a particular value within a dataset\n\nFor example, consider a scenario where you are comparing the performance of students in two different subjects, one with scores ranging from 0 to 100 and another with scores ranging from 0 to 50. Without standardization, it can be challenging to assess which student has performed relatively better across both subjects.\n\n\nThe $z$-score of a particular value is defined as \n$$\nz = \\frac{\\text{value} - \\text{mean}}{\\text{standard deviation}}\n$$\nIf the values in their original units of measurement follow a normal distribution, then the $z$-scores will follow a standard normal distribution\n\nRecall the SAT-M scores example: Suppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111. What is the probability of scoring less than 700 on the SAT-M?\n\n\n```{r}\npnorm(700, mean = 507, sd = 111)\n```\n\n\nWe can also compute this quantity with the $z$-score with respect to the standard normal distribution\n$$\n\\begin{align*}\nz &= \\frac{\\text{value} - \\text{mean}}{\\text{standard deviation}} \\\\[10pt]\nz &= \\frac{700 - 507}{111} \\\\[10pt]\nz &= 1.738739\n\\end{align*}\n$$\n```{r}\nz <- (700-507)/111\npnorm(z)\n```\n\n<details>\n<summary>Show Code</summary>\n```{r}\nprob2 <- round(z * 100,2)\np2 <- ggplot(data.frame(x = c(-4,4)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(-4,4),\n                args = list(mean = 0,sd = 1)) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'red',\n                alpha =0.3,\n                xlim = c(-4, z),\n                args = list(mean = 0,sd = 1))+\n  annotate(\"text\", x = (510-507)/111, y = 0.15, \n           label = paste0(prob1,'%'),\n           size = 8)+\n  geom_vline(xintercept = z,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n</details>\n\n\n```{r,fig.width=6,echo=FALSE}\np2\n```\n\n\nBy standardizing the scores, we shift from calculating $P(X < 700)$ where the units are in SAT-M scores to equivalently computing $P(Z < 1.738739)$. This represents the number of standard deviations a data point is from the mean of the distribution. By standardizing we can now compare these results with say scores obtained from an english SAT exam on the same scale\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"fig-align":"center","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"reference-location":"document","output-file":"09-normal_distribution.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":["sandstone","../assets/styles.scss"],"published-title":"last updated","code-summary":"","author":"Jose Toledo Luna","date":"November 09, 2023","title":"Normal Distribution"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}