{"title":"Introduction to For-Loops","markdown":{"yaml":{"author":"Jose Toledo Luna","title":"Introduction to For-Loops","toc":true,"date":"October 27, 2023"},"headingText":"Using a For-Loop on a vector","containsRefs":false,"markdown":"\n\n\nA for-loop serves the purpose of cycling through a collection of objects, such as a vector, list, matrix, or dataframe, and consistently applying a specific set of operations to each element within the data structure\n\n\nThe syntax of a for-loop in R consists of a `variable` which takes items from the `iterable` one by one, where the `iterable` is the collection of objects provided *(vector, list, matrix, etc..)*\n\nLastly, inside the for-loop within the curly braces `{ }` is the `loop body` which are statements that are executed once for each item in the `iterable` provided\n\n```{r,eval=FALSE}\nfor(variable in iterable) {\n  loop body\n}\n```\n\n\nUtilizing for-loops helps maintain code cleanliness and prevents unnecessary duplication of code blocks\n\n\n\nTo start with a basic example, consider printing the numbers from `1 to 5` inclusive, this is our `iterable` and is constructed using any sequence operator. This can be `a:b` or the built-in function `seq()`\n\n\n```{r}\nfor (index in 1:5){\n  print(index)\n}\n```\n\n\nHere `index` is our `variable`, the variable name can be anything but it is usually in the context of the problem\n\n\nFor example, this can be anything from `car`,`letters`, `months`, etc.., in most cases usually the variable name `i` suffices \n\nOur `loop body` is simply to `print()` the current index\n\n\n\n\nIn the next example, we will print the numbers from `1 to 5` and then double each number before printing it\n\n```{r}\nfor(i in 1:5){\n  print(i*2)\n}\n```\n\n\n\nHowever, there are scenarios where we not only want to print these values but also store them after each iteration. To do that, we need to start by creating an empty object. This object can be new or an existing one, but it's important to keep in mind that after each iteration, the object may be modified\n\n\nThe function `numeric()` creates a numeric vector of all `0` of a specified `length`. Here the `length`, should be the the same size as the `iterable`\n\n```{r}\nvec <- numeric(length = 5)\n```\n\n```{r}\nvec\n```\n\n\n```{r}\nfor(i in 1:5){\n  print(paste0('Current Iteration: ',i) ) #<1>\n  \n  vec[i] <- (i*2)  #<2>\n  \n  print(vec) #<3>\n}\n```\n1. Print the current iteration *(optional)*\n2. Update the $i$th element of the vector `vec` by doubling the current index\n3. Print the updated vector `vec` *(optional)*\n\n\nHere is the resulting vector\n\n```{r}\nvec\n```\n\n:::callout-warning\nIn R, for-loops tend to be slow. To mitigate the performance issues associated with for-loops, it is often recommended to use vectorized operations or apply functions\n:::\n\n\nFor example, \n\n```{r}\nvec <- 2*(1:5)\nvec\n```\n\nIt is clear there was no need to use a for-loop in the previous example it was simply for teaching purposes\n\nWe don't need to iterate sequentially from a regular sequence `1:N`. We can iterate through the elements of an existing object. For example,\n\n```{r}\nfor(i in 3:6){\n  print(i)\n}\n```\n\n\n```{r}\nfor(i in seq(from = 1, to = 11, by = 2)){\n  print(i)\n}\n```\n\n\n```{r}\nfor(pet in c('dog','cat','hamster','turtle')){\n  print(pet)\n}\n```\n\n\nHowever, if you are trying to update the $i$th element of an object this approach might not be the best\n\n```{r}\nvec <- numeric(length=3)\n\nfor(index in c(2,4,6) ){\n  print( vec[index] )\n}\n```\n\nAn `NA` is produced because our vector `vec` has three elements and we are trying to access the 4th and 6th element which do not exist \n\nInstead use the function `seq_along(x)` which will create a regular sequence from `1:length(x)`\n\n```{r}\nseq_along(c(2,4,6))\n```\n\n```{r}\nseq_along(c('dog','cat','hamster','turtle'))\n```\n\n\n```{r}\nfor(index in seq_along(c(2,4,6)) ){\n  print(index)\n}\n```\n\n","srcMarkdownNoYaml":"\n\n\nA for-loop serves the purpose of cycling through a collection of objects, such as a vector, list, matrix, or dataframe, and consistently applying a specific set of operations to each element within the data structure\n\n\nThe syntax of a for-loop in R consists of a `variable` which takes items from the `iterable` one by one, where the `iterable` is the collection of objects provided *(vector, list, matrix, etc..)*\n\nLastly, inside the for-loop within the curly braces `{ }` is the `loop body` which are statements that are executed once for each item in the `iterable` provided\n\n```{r,eval=FALSE}\nfor(variable in iterable) {\n  loop body\n}\n```\n\n\nUtilizing for-loops helps maintain code cleanliness and prevents unnecessary duplication of code blocks\n\n\n\nTo start with a basic example, consider printing the numbers from `1 to 5` inclusive, this is our `iterable` and is constructed using any sequence operator. This can be `a:b` or the built-in function `seq()`\n\n\n```{r}\nfor (index in 1:5){\n  print(index)\n}\n```\n\n\nHere `index` is our `variable`, the variable name can be anything but it is usually in the context of the problem\n\n\nFor example, this can be anything from `car`,`letters`, `months`, etc.., in most cases usually the variable name `i` suffices \n\nOur `loop body` is simply to `print()` the current index\n\n\n### Using a For-Loop on a vector\n\n\nIn the next example, we will print the numbers from `1 to 5` and then double each number before printing it\n\n```{r}\nfor(i in 1:5){\n  print(i*2)\n}\n```\n\n\n\nHowever, there are scenarios where we not only want to print these values but also store them after each iteration. To do that, we need to start by creating an empty object. This object can be new or an existing one, but it's important to keep in mind that after each iteration, the object may be modified\n\n\nThe function `numeric()` creates a numeric vector of all `0` of a specified `length`. Here the `length`, should be the the same size as the `iterable`\n\n```{r}\nvec <- numeric(length = 5)\n```\n\n```{r}\nvec\n```\n\n\n```{r}\nfor(i in 1:5){\n  print(paste0('Current Iteration: ',i) ) #<1>\n  \n  vec[i] <- (i*2)  #<2>\n  \n  print(vec) #<3>\n}\n```\n1. Print the current iteration *(optional)*\n2. Update the $i$th element of the vector `vec` by doubling the current index\n3. Print the updated vector `vec` *(optional)*\n\n\nHere is the resulting vector\n\n```{r}\nvec\n```\n\n:::callout-warning\nIn R, for-loops tend to be slow. To mitigate the performance issues associated with for-loops, it is often recommended to use vectorized operations or apply functions\n:::\n\n\nFor example, \n\n```{r}\nvec <- 2*(1:5)\nvec\n```\n\nIt is clear there was no need to use a for-loop in the previous example it was simply for teaching purposes\n\nWe don't need to iterate sequentially from a regular sequence `1:N`. We can iterate through the elements of an existing object. For example,\n\n```{r}\nfor(i in 3:6){\n  print(i)\n}\n```\n\n\n```{r}\nfor(i in seq(from = 1, to = 11, by = 2)){\n  print(i)\n}\n```\n\n\n```{r}\nfor(pet in c('dog','cat','hamster','turtle')){\n  print(pet)\n}\n```\n\n\nHowever, if you are trying to update the $i$th element of an object this approach might not be the best\n\n```{r}\nvec <- numeric(length=3)\n\nfor(index in c(2,4,6) ){\n  print( vec[index] )\n}\n```\n\nAn `NA` is produced because our vector `vec` has three elements and we are trying to access the 4th and 6th element which do not exist \n\nInstead use the function `seq_along(x)` which will create a regular sequence from `1:length(x)`\n\n```{r}\nseq_along(c(2,4,6))\n```\n\n```{r}\nseq_along(c('dog','cat','hamster','turtle'))\n```\n\n\n```{r}\nfor(index in seq_along(c(2,4,6)) ){\n  print(index)\n}\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"fig-align":"center","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"reference-location":"document","output-file":"07-for-loops.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":["sandstone","../assets/styles.scss"],"published-title":"class date","code-summary":"","author":"Jose Toledo Luna","title":"Introduction to For-Loops","date":"October 27, 2023"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}