{
  "hash": "44bb1552d7fae1cf3dd0016dc1384512",
  "result": {
    "markdown": "---\ntitle: \"Fundamentals of R\"\nauthor: Jose Toledo Luna\ntoc: true\ndate: October 27, 2023\n---\n\n\n## Variables\n\nA variable provides us with named objects that our programs can manipulate. A valid variable name consists of letters, numbers and the dot or underline characters. It is important to note variable names are case sensitive. That is, `var1` and `Var1` are different variables. Below are appropriate variable names in R\n\n| Valid Variable Name | Reason                                                 |\n|------------------------|-----------------------------------------------|\n| variable_name       | Contains letters and underscore                        |\n| long.variable_name  | Contains letters, dot, and underscore                  |\n| var                 | Contains letters                                       |\n| var1                | Contains letters and numbers                           |\n| long.variable_name2 | Contains letters, numbers, dot and underscore          |\n| var1_name.1         | Contains letters, numbers, dot and underscore          |\n| .var_name           | Can start with period, contains letters and underscore |\n\nThis is a good starting point for valid variable names. Next we demonstrate a few examples where variable names are invalid.\n\n| Invalid Variable Names | Reason                                                                     |\n|-------------------|-----------------------------------------------------|\n| 2var                   | Starts with a number                                                       |\n| \\_varname              | Starts with underscore                                                     |\n| .2var_name             | While starting with a (.) dot is valid, it can not be followed by a number |\n\nNow that we have an idea of how to name variables, lets discuss variable assignments. Variables can be assigned values using leftward `(<-)`, rightward `(->)` and equal `(=)` operators. However, we will only stick with the leftward and equal assignment operators.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_name1 <- 10\nvar2 = 20\nvar.name3 <- 30\nvar_name_4 = 40\n```\n:::\n\n\n## Vectors\n\nThe easiest method to create any type of vector in R is using `c()` (as in concatenate). We primarily focus on two types of vectors; *numeric* and *character*\n\n### Numeric vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_vec <- c(0,1,2,3,4)\ntypeof(num_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nclass(num_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nUsing `c()` is not the only way to generate a vector, we can also generate the above vector using `seq()` as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from=0,to=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3 4\n```\n:::\n:::\n\n\nAnother approach to generate the same sequence can be done using `0:4`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0:4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3 4\n```\n:::\n:::\n\n\nor more generally `a:b`, where `a` is the starting number and `b` is the last number in the sequence\n\nWe can apply arithmetic operations to our numerical vector `num_vec`, such as addition, subtraction, multiplication, division, and exponentiation. These operations will be applied to each element in the vector *(element-wise)*.\n\n| Operator | Description                       |\n|----------|-----------------------------------|\n| \\+       | Addition                          |\n| \\-       | Subtraction                       |\n| \\*       | Multiplication                    |\n| /        | Division                          |\n| \\^       | Exponent                          |\n| %%       | Modulus (Remainder from division) |\n| %/%      | Integer Division                  |\n\nArithmetic operations applied to numeric vectors follow PEMDAS order of operations, demonstrated in the following example\n\n*Subtract 1 from each element*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(num_vec-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1  0  1  2  3\n```\n:::\n:::\n\n\n*Subtract 1 from each element, then square them*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(num_vec-1)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 1 4 9\n```\n:::\n:::\n\n\n*Subtract 1 from each element, square them, then double each element*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n 2*(num_vec - 1)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  0  2  8 18\n```\n:::\n:::\n\n\n*Subtract 1 from each element, square them, double them, then add 1 to each element*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2*(num_vec - 1)^2 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  1  3  9 19\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npemdas_vec <- 2*(num_vec - 1)^2 + 1\npemdas_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  1  3  9 19\n```\n:::\n:::\n\n\nGenerating an odd sequence from 1 to 9, we can use `c()` or `seq()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,3,5,7,9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5 7 9\n```\n:::\n\n```{.r .cell-code}\nseq(from =1,to=10,by=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5 7 9\n```\n:::\n:::\n\n\nNote if you know the ordering of the arguments of a function it is not necessary to specify them. For example, it is optional to write `from` and `to` arguments in the `seq()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1,to = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nseq(1,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n### Character vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr_vec <- c('A','B',\"C\")\ntypeof(chr_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(chr_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Manipulating vectors\n\nThere are multiple ways to access or replace values in vectors. The most common approach is through \"indexing\". It is important to know in \\verb|R| starts with index 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_vec <- 1:100\nbig_vec[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nbig_vec[10] # extract the 10th element in your vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nFor accessing elements in a vector we can think \n`vector[indices you want to extract]` the way we extract certain elements can be through some condition, that is `vector[condtion]`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_vec[ c(1,5,10) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  5 10\n```\n:::\n\n```{.r .cell-code}\nbig_vec[ 1:10 ] # what are the first 10 elements ?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n\nUsing `c()` we can concatenate elements from one vector into another vector. For example, we can add the elements from `pemdas_vec` into the existing vector  `num_vec`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(num_vec,pemdas_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  1  2  3  4  3  1  3  9 19\n```\n:::\n:::\n\n\nAlternatively, we can add the elements from `num_vec` into the existing vector `pemdas_vec`\n\n::: {.cell}\n\n```{.r .cell-code}\nc(pemdas_vec,num_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3  1  3  9 19  0  1  2  3  4\n```\n:::\n:::\n\n\nYou will notice the order in which we concatenate the elements from the vectors does matter\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"B\" \"C\"\n```\n:::\n\n```{.r .cell-code}\nchr_vec[1] <- 'a'\nchr_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"B\" \"C\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nnum_vec[3] <- 10\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0  1 10  3  4\n```\n:::\n\n```{.r .cell-code}\nnum_vec[ c(1,3) ] <- c(100,200)\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100   1 200   3   4\n```\n:::\n\n```{.r .cell-code}\nnum_vec[c(1,2,3)] <- 0\nnum_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 3 4\n```\n:::\n:::\n\n\n## Installing packages\n\nWhile base R contains a wide collection of useful functions and datasets, it might be necessary to install additional R packages to increase the power of R by improving existing base R functionalities, or by adding new ones.\n\nIn general, you can use this template to install a package in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('package_name')\n```\n:::\n\n\nFor example, in this lab we will need functions/datasets from the following package: `maps`. To install we simply type in our console\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('maps')\n```\n:::\n\n\nAfter running the above command you should get something similar to the output below. The messages appeared will depend on what operating system you are using, the dependencies, and if the package was successfully installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.2/maps_3.4.0.tgz'\nContent type 'application/x-gzip' length 3105764 bytes (3.0 MB)\n==================================================\ndownloaded 3.0 MB\n\n\nThe downloaded binary packages are in\n\t/var/folders/mc/rznpg9ks30sd6wdh7rchs4v40000gn/T//RtmpLUHvkq/downloaded_packages\n```\n:::\n\n\nOnce the package was installed successfully we now have access to all of its functionalities/datasets. To access them we load the package into memory using the command `library()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(maps)\n```\n:::\n\n\nHowever, if we only need to access say a specific function/dataset a few times we can do so using the notation `packagename::functionname()`. For example, if we only need to access the Canada cities data set in the `maps` package we run the following command\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaps::canada.cities\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n           name country.etc    pop   lat    long capital\n1 Abbotsford BC          BC 157795 49.06 -122.30       0\n2      Acton ON          ON   8308 43.63  -80.03       0\n3 Acton Vale QC          QC   5153 45.63  -72.57       0\n4    Airdrie AB          AB  25863 51.30 -114.02       0\n5    Aklavik NT          NT    643 68.22 -135.00       0\n```\n:::\n:::\n\n\nAlternatively, if you loaded the entire package using `library(maps)` we can access the Canada cities data set using the following command\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncanada.cities\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n           name country.etc    pop   lat    long capital\n1 Abbotsford BC          BC 157795 49.06 -122.30       0\n2      Acton ON          ON   8308 43.63  -80.03       0\n3 Acton Vale QC          QC   5153 45.63  -72.57       0\n4    Airdrie AB          AB  25863 51.30 -114.02       0\n5    Aklavik NT          NT    643 68.22 -135.00       0\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}