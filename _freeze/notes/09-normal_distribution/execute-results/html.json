{
  "hash": "1cb4c9ab63b3a9fb58e90835d4aeddc2",
  "result": {
    "markdown": "---\nauthor: Jose Toledo Luna\ndate: October 27, 2023\ntitle: Normal Distribution\ntoc: true\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\ntheme_replace(panel.grid.minor = element_blank(),\n              panel.grid.major = element_blank())\n```\n:::\n\n\n\n## Normal Distribution\n\nOne of the most important and widely used continuous distribution is the Normal distribution, or Gaussian distribution.\n\nLet $X \\sim N(\\mu,\\sigma)$ be a random variable following a normal distribution with mean $\\mu$ and standard deviation $\\sigma$. In R, the following functions described in the table below, allows us to summarize the function relating to the normal distribution\n\n+----------+----------------------------------------------+\n| Function | Description                                  |\n+==========+==============================================+\n| dnorm    | Normal density\\                              |\n|          | (Probability Density Function)               |\n+----------+----------------------------------------------+\n| pnorm    | Normal distribution\\                         |\n|          | (Cumulative Distribution Function)           |\n+----------+----------------------------------------------+\n| qnorm    | Quantile function of the Normal distribution |\n+----------+----------------------------------------------+\n| rnorm    | Normal random number generation              |\n+----------+----------------------------------------------+\n\n\nBy default, all of the functions above consider the standard Normal distribution, which has a mean of zero and a standard deviation of one, $X \\sim N(0,1)$\n\n\n### dnorm\n\nThe density function for a normal distribution with mean $\\mu$ and standard deviation $\\sigma$ is \n\n$$\nf(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\exp{\\left(\n-\\frac{1}{2\\sigma^2 }(x-\\mu)^2\n\\right)}\n$$\nfor $-\\infty < x < \\infty$\n\nWe can use `dnorm()` function to calculate the density function, i.e $f(x)$, for a grid of $x$ values from any normal distribution with mean $\\mu$ and standard deviation $\\sigma$\n\nFor example, we can calculate $f(0)$ from a standard normal distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndnorm(x = 0,mean = 0,sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.3989423\n```\n:::\n:::\n\n\nConsider evaluating $f(x)$ for $x \\in [1,10]$ with mean 1 and standard deviation of 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndnorm(x=1:10, mean = 1, sd =3 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 0.132980760 0.125794409 0.106482669 0.080656908 0.054670025 0.033159046\n#>  [7] 0.017996989 0.008740630 0.003798662 0.001477283\n```\n:::\n:::\n\n\n\n### pnorm\n\nThe `pnorm()` function gives the Cumulative Distribution Function *(CDF)* of the Normal distribution, which is the probability that the variable $X$ takes a value less than or equal to $x$.\nMathematically, $F_X(x) = P(X \\leq x)$. \n\n\nFor any continuous distribution $P(X = x)=0$, so equivalently the *CDF* is $P(X \\leq x) = P(X < x)$.\n\n\nConsider the standard normal distribution, since this distribution is symmetrical centered around $\\mu=0$ then $P(X \\leq 0) = 0.5$. We can verify this result using `pnorm` as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(0,mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.5\n```\n:::\n:::\n\n\n\n**Example:** Suppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111. What is the probability of scoring less than 700 on the SAT-M?\n\n<details>\n\n<summary>Show Code</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob1 <- round(pnorm(700, mean=507, sd=111) * 100,2)\np1 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(\n                  mean = 507,\n                  sd = 111\n                )) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(150, 700),\n                args = list(\n                  mean = 507,\n                  sd = 111\n                ))+\n  annotate(\"text\", x = 510, y = 0.0015, \n           label = paste0(prob1,'%'),\n           size = 8)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n:::\n\n\n</details>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-normal_distribution_files/figure-html/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\n\nThat is $P(X < 700)$,\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(700, mean=507, sd=111)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.9589596\n```\n:::\n:::\n\n\n\nWhat about the probability of scoring greater than 700?\n\n<details>\n\n<summary>Show Code</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob2 <- round(pnorm(700, mean=507, sd=111,\n                     lower.tail = FALSE)*100,2)\n\np2 <- ggplot(data.frame(x = c(150,900)), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = c(150,900),\n                args = list(\n                  mean = 507,\n                  sd = 111\n                )) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(700, 900),\n                args = list(\n                  mean = 507,\n                  sd = 111\n                ))+\n  annotate(\"text\", x = 738, y = 0.00017, \n           label = paste0(prob2,'%'),\n           size=4.7)+\n  geom_vline(xintercept = 700,linetype =2)+\n  labs(x = '',y= 'Density')\n```\n:::\n\n\n</details>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-normal_distribution_files/figure-html/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\n\nWe are interested $P(X > 700)$, which can be obtained through $P(X > 700) = 1- P(X \\leq 700)$ \n\n\n::: {.cell}\n\n```{.r .cell-code}\n1-pnorm(700, mean = 507, sd = 111)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.04104036\n```\n:::\n:::\n\n\nAlternative, `pnorm()` has an argument `lower.tail=TRUE` *(by default)*.\nIf `lower.tail=TRUE`, the probabilities $P(X \\leq x)$ are returned.\nOtherwise, if `lower.tail=FALSE`, $P(X > x)$  are returned\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(700, mean = 507, sd = 111, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.04104036\n```\n:::\n:::\n\n\n\nThe Empirical rule *(also known as the 68-95-99.7 rule)* is a statistical rule stating that for a normal distribution, where most of the data will fall within three standard deviations of the mean. The empirical rule can be broken down into three parts: 68% of data falls within the first standard deviation from the mean *(blue shaded region)*. 95% fall within the 2nd standard deviations *(up to the green shaded region)*. 99.7% fall within third standard deviation *(up to the red shaded region)*\n\n\n<details>\n\n<summary>Show Code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nx_limits <- c(-4,4)\np1 <- ggplot(data.frame(x = x_limits), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(-1, 1))+\n  labs(x = '',y= 'Density')+\n  annotate(\"text\", x = 0.1, y = 0.15, \n           label = paste0(68,'%'),\n           size=4.5)+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- ggplot(data.frame(x = x_limits), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = \"green\",\n                alpha =0.3,\n                xlim = c(-2, 2)) +\n  labs(x = '',y= '')+\n  annotate(\"text\", x = 0, y = 0.15, \n           label = paste0(95,'%'),\n           size=4.5)+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np3 <- ggplot(data.frame(x = x_limits), aes(x)) +  \n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = \"red\",\n                alpha = 0.3,\n                xlim = c(-3, 3))+\n  labs(x='',y='',)+\n  annotate(\"text\", x = 0.1, y = 0.15, \n           label = paste0(99.7,'%'),\n           size=4.5)+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplots <- p1+p2+p3+plot_layout(ncol = 3)+\n  plot_annotation(title = '68-95-98.7 Rule')\n```\n:::\n\n\n</details>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-normal_distribution_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\nWe can easily verify these results using `pnorm`. Assuming a standard Normal distribution if we were one standard deviation away from the mean then \n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(1)-pnorm(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.6826895\n```\n:::\n:::\n\n\nIf we were two standard deviations away from the mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(2) - pnorm(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.9544997\n```\n:::\n:::\n\n\nand lastly, three standard deviations away from the mean \n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(3) - pnorm(-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0.9973002\n```\n:::\n:::\n\n\n\n### qnorm\n\nThe function `qnorm()` returns the value of the inverse cumulative density function *(CDF)* of the normal distribution with specified mean $\\mu$ and standard deviation $\\sigma$. \n\nLet $F_X(x) = P(X \\leq x)$ be the *CDF* of the normal distribution, and suppose it returns the probability $p$, i.e, $F_X(x) = p$. The inverse of the *CDF* or *(quantile function)* tells you what $x$ would make $F_X(x)$ return some probability $p$;\n\n$$F_X^{-1}(p) = x$$\nFor example, for the standard normal distribution\n$F_X(0)=P(X \\leq 0) = 0.5$. That is, the value of $x$ or *(quantile)* which gives us a cumulative probability of 0.5 is $x=0$. \n\nTherefore, we can use the `qnorm()` function to find out what value of $x$ or *(quantile)* gives us a\na cumulative probability of $p$. Hence, the `qnorm` function is the inverse of the `pnorm` function\n\n\n<details>\n\n<summary>Show Code</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_limits <- c(-4,4)\n\np1 <- ggplot(data.frame(x = x_limits), aes(x)) +\n  stat_function(fun = dnorm,\n                geom = \"line\",\n                xlim = x_limits) +\n  stat_function(fun = dnorm,\n                geom = \"area\",\n                fill = 'steelblue',\n                alpha =0.3,\n                xlim = c(-4, 0))+\n  geom_vline(xintercept = 0,linetype=2,color = '#cf5d55')+\n  labs(x = '',y= 'Density')+\n  annotate('text', x = -0.65, y = 0.17, \n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]),'(0)==0.5') )+\n  annotate('text',x = 0.77, y = 0.41,\n           parse =TRUE,\n           label = paste0(\n             expression('F'[x]^{-1}),' *(0.5)==0'),\n           color = '#cf5d55')+\n  scale_x_continuous(name = '',limits = x_limits,\n                     breaks = -4:4)\n```\n:::\n\n\n</details>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-normal_distribution_files/figure-html/unnamed-chunk-22-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(p=0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 0\n```\n:::\n:::\n\n\nGoing back to our example of the SAT-M scores.\nSuppose $X$ is the SAT-M score which has a normal distribution with a mean of 507 and standard deviation of 111.\nRecall the probability of obtaining a score less than 700 on the SAT-M was $P(X < 700) = 0.9589596$. \nTherefore, if we were interesting in finding the score or *(quantile)* which gives us a cumulative probability of roughly 96\\% we can use `qnorm` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm(0.9589596, mean=507, sd=111)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 700\n```\n:::\n:::\n\n\nWe should see that the output value is exactly 700.\n\n\n\n### rnorm\n\nThe `rnorm` function generates $n$ observations from a Normal distribution with mean $\\mu$ and standard deviation $\\sigma$.\n\nWe specify a seed for reproducibility,\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(10)\n```\n:::\n\n\nLet's start by generate 10 random observations from a standard normal distribution\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(10, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1]  0.01874617 -0.18425254 -1.37133055 -0.59916772  0.29454513  0.38979430\n#>  [7] -1.20807618 -0.36367602 -1.62667268 -0.25647839\n```\n:::\n:::\n\n\nor equivalently,\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1]  1.10177950  0.75578151 -0.23823356  0.98744470  0.74139013  0.08934727\n#>  [7] -0.95494386 -0.19515038  0.92552126  0.48297852\n```\n:::\n:::\n\n\nWe can specify a different mean and standard deviation \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(10, mean = 10, sd = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] 8.807379 5.629426 8.650268 5.761878 7.469604 9.252677 8.624889 8.255682\n#>  [9] 9.796478 9.492439\n```\n:::\n:::\n\n\nIn the following plot we generate $n=100,1000,10000$ random observations from a standard normal distribution.\nIf we increase the number of observations, we see the data will approach the true Normal density function \n\n<details>\n\n<summary>Show Code</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\np100 <- ggplot(data = data.frame(x=rnorm(100)),\n               aes(x))+\n  geom_histogram(aes(y = after_stat(density)),\n                 colour = 1, fill = \"steelblue\",\n                 alpha =0.3,\n                 bins=30) +\n  geom_density(linewidth = 1.2,\n               linetype = 2,\n               colour = 2)+\n  labs(x= '',y = 'density')+\n  facet_grid(~100)\n\np1000 <- ggplot(data = data.frame(x=rnorm(100)),\n                aes(x))+\n  geom_histogram(aes(y = after_stat(density)),\n                 colour = 1, fill = \"steelblue\",\n                 alpha = 0.3,bins=30) +\n  geom_density(linewidth = 1.2,\n               linetype = 2,\n               colour = 2)+\n  labs(x= '',y = '')+\n  facet_grid(~1000)\n\np10000 <- ggplot(data = data.frame(x=rnorm(10000)),\n                 aes(x))+\n  geom_histogram(aes(y = after_stat(density)),\n                 colour = 1, fill = \"steelblue\",\n                 alpha = 0.3,bins=30) +\n  geom_density(linewidth = 1.2,\n               linetype = 2,\n               colour = 2)+\n  labs(x= '',y = '')+\n  facet_grid(~10000)\n\nplots <- p100 + p1000 + p10000 + plot_layout(ncol = 3)\n```\n:::\n\n</details>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](09-normal_distribution_files/figure-html/unnamed-chunk-30-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "09-normal_distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}