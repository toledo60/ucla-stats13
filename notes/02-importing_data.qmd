---
title: Importing Data in R
author: Jose Toledo Luna
date: October 27, 2023
toc: true
---

## Comma-Seperated Values (CSV) 

:::callout-warning
This tutorial assumes the data set is in working condition. That is we assume the default settings for `read.csv`. In some cases we may need to change the header, specify the field separator and more. See `?read.csv` for further details and examples.
:::

We will now import a `csv` file, to do this we will use the `read.csv` function. A simple template to follow is

```{r,eval=FALSE}
read.csv(file = 'path where csv is located in your computer')
```

An easy way to find the location of your data *(or any file)* is using the `file.choose()` function in R. `file.choose()` will bring up a file explorer window that allows you to interactively choose a file path to work with.

In your console, run the following command

```{r,eval=FALSE}
file.choose()
```

For example, after running the above command the `births` dataset is located in

```{r,echo=FALSE}
birth_data_location <- here::here("data", "births.csv")
birth_data_location
```

:::callout-warning
Depending on your location and operating system the directory will be different
:::

Therefore, to read the `births` data set I would copy/paste the directory of the csv location and run the following command


```{r}
birth_dat <- read.csv(file = "/Users/toledo60/Desktop/Projects/ucla-stats13/data/births.csv")
```


```{r,echo=FALSE}
birth_dat |> head()
```


We are not just limited to `csv` files, we can import data from Excel (in `csv`, `XLSX`, or `txt` format), `SAS`, `Stata`, `SPSS`, or others. A good reference to import various data formats can be found on [datacamp r-data-import tutorial](https://www.datacamp.com/tutorial/r-data-import-tutorial)


## Text File (TXT)

Next, we consider importing a `.txt` file. To do so we will use the `read.table` function instead of the `read.csv` function. For this example, we consider the `ozone.txt` file from our course website

A simple template to follow is 

```{r,eval=FALSE}
read.table(file = 'path where txt file is located in your computer')
```

After running `file.choose()` on our console and locating the path in which we stored our data

```{r,eval=FALSE}
file.choose()
```


```{r,echo=FALSE}
ozone_data_location <- here::here("ucla","stats10","data", "ozone.txt")
ozone_data_location
```

we can copy/paste the path as follows

```{r}
ozone_dat <- read.table(file = "/Users/toledo60/Desktop/Projects/ucla-stats13/data/ozone.txt", 
                        header =TRUE)
```

```{r,eval=FALSE}
ozone_dat
```


```{r,echo=FALSE}
head(ozone_dat,5)
```

You will notice we now used an additional argument `header = TRUE` in our `read.table` function. We use `header=TRUE`, whenever the text tile contains names of the variables as its first line. 

If we forget to use `header=TRUE`, the first line of the text file will be treated as a row of the dataset and `read.table` will automatically create the variable names for us

```{r}
wrong_ozone_dat <- read.table(file = "/Users/toledo60/Desktop/Projects/ucla-stats13/data/ozone.txt")
```

```{r,eval=FALSE}
wrong_ozone_dat
```


```{r,echo=FALSE}
head(wrong_ozone_dat,5)
```

In the above example, `read.table` automatically create the variable names `V1,V2,V2` for each column and the first row has values `x,y,o3` *(which is incorrect)*.

In conclusion, some text files do not have variable names in the first row and only contain the actual data. As a result, it is our responsibility to import the data in a suitable manner.
