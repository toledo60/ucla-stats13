---
author: Jose Toledo Luna
title: MOSAIC Library
toc: true
date: October 27, 2023
---


```{r setup, include = FALSE}
knitr::opts_chunk$set(
  comment = "#>",
  fig.width = 6,
  fig.height = 4,
  eval = TRUE
)
```

```{=html}
<style>
  .vertical-space {
    margin-bottom: 30px;
  }
</style>
```


### Installation


The goal of the `mosaic` package is to make effective computation accessible to university-level students at an introductory level

The following packages from the `mosaic suite` will be used throughout the labs.

- `{mosaic}`
  - `{mosaicCore}`
  - `{mosaicData}`

You can the above packages by running the following command in the **Console**

```{r, eval=FALSE}
install.packages('mosaic')
```


:::callout-warning
If you are installing the package for the first time, please be aware that it might take some time since there are numerous dependencies that need to be installed beforehand (this is done automatically)
:::

You can see the remaining packages part of the `mosaic suite` on the [Project MOSAIC Homepage](http://www.mosaic-web.org/R-packages.html), but they will not be used for this course

::: vertical-space
:::


If you have successfully installed `mosaic` package you should be able to run the command  `library(mosaic)` in the console without any errors. However, you will see the following *messages*


```{r,message=FALSE,warning=FALSE}
#| eval: true

library(mosaic) #<1>
#> Registered S3 method overwritten by 'mosaic':
#>   method                           from   
#>   fortify.SpatialPolygonsDataFrame ggplot2
#> 
#> The 'mosaic' package masks several functions from core packages in order to add 
#> additional features.  The original behavior of these functions should not be affected by this.  #<2>
#> 
#> Attaching package: 'mosaic'
#> The following objects are masked from 'package:dplyr':
#>     count, do, tally
#> The following object is masked from 'package:Matrix':
#>     mean
#> The following object is masked from 'package:ggplot2':
#>     stat
#> The following objects are masked from 'package:stats':
#>     binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,
#>     quantile, sd, t.test, var
#>     
#> The following objects are masked from 'package:base':
#>     max, mean, min, prod, range, sample, sum
```
1. Make sure to load `mosiac` package first, you only have to do this once at the beginning of your script. Proceeding, this tutorial will assume you have loaded the `mosaic` package
2. The output above are simply messages when initially starting up the package warning you about masking of functions with the same name as different packages


For example, the function `binom.test()` is used in two different packages `mosaic` and `stats`. If two packages use the same function name, then the package loaded last will hide the function from earlier packages. This is called **masking**

While in general, the order of packages being loaded does not matter, if you are using multiple packages which have functions with the exact same name it is better to explicitly call the function name using `package_name::function`


```{r,eval=FALSE}
mosaic::binom.test()
stats::binom.test()
```


:::vertical-space
:::

### Commonly used functions

For **numerical summaries**, the following functions are `mosaic` specific and will be used throughout the course


- `tally()`: tabulate categorical data
- `favstats()`: numerical summaries including: min, Q1, media, Q3, max, mean, sd, number of observations and missing values
- `diffmean()`: difference in means
- `prop()`: computes proportions for a single level
- `perc()`: computes percents for a single level


While the following functions are in base R, `MOSAIC` provides equivalent functions with a `formula interface`


```{r,eval=FALSE}
mosaic::mean()
mosaic::median()
mosaic::sd()
```

If you are going to use say the function `mean` make sure to specify it is the `mosaic` version. For example, `mosaic::mean()`. If you want to know the differences between base R version \newline 
run `?base::mean()` or `?mosaic::mean()`


**Randomization/Simulation**

For randomization or simulations procedures we will primarily use the following `mosaic` functions

- `rflip()`: simulates coin tosses for individuals not yet familiarized with the binomial distribution or just like this syntax and verbosity better.
- `do()`: provides a natural syntax for repetition tuned to assist with replication and resampling methods


For a quick overview of the basic of MOSAIC package, refer to [Minimal R for Intro Stats](https://cran.r-project.org/web/packages/mosaic/vignettes/MinimalRgg.pdf) tutorial. Note, we will not use all of the functions in the `mosaic` package


## Examples

### Numerical Summaries

Consider the following vector containing various types of animals (mostly pets)

```{r}
animals <- c("fish", "cat",  "fish", "cat"  ,"bird" ,"fish" ,"bird" ,
             "bird" ,"dog"  ,"cat"  ,"dog"  ,"dog"  ,"cat", "dog",  
             "dog",  "cat",  "bird", "cat" , "bird", "fish")
```

loading the `mosaic` package and using the `tally()` function

```{r}
tally(animals)
```

we can obtain the counts for each animal. By default `tally()` gives us counts, but we can also display the proportions using the `format` argument

```{r}
tally(animals, format = 'proportion')
```

which is more readable than using base R

```{r}
prop.table(table(animals))
```


Reading the documentation `?mosaicCore::tally`, format can take one of the following types

```{r,eval=FALSE}
c("count", "proportion", "percent", "data.frame", "sparse", "default")
```


```{r}
tally(animals, format = 'percent')
```


### Simulation


For simulation the `do()` function from `mosaic` provides a natural syntax for repetition tuned to assist with replication and resampling methods. Consider the following example

```{r}
do_hello <- do(3) * 'hello' #<1>
do_hello
```
1. Interpretation: write 'hello' three times


We are going to "do" the word three times `do(3)` using the operator `*` not to confuse with multiplication 

```{r}
str(do_hello)
```

`do` returns class `do.data.frame` and `data.frame` where each row is the output after performing the task after the `*` operator one time

```{r}
do_hello$hello
```

If you want to extract the values from the generated data.frame, we can use the `$` operator


In the next example, we are going to write the numbers `1:4` five times

```{r}
do(5) * 1:4
```

again the output will be a data.frame where each row is the numbers 1:4, you can think of each row as a replication of the desired task. In some way, it is similar to the base R approach of using `replicate`

```{r}
replicate(n=5, 1:4)
```




Another function from `mosaic` to consider is `rflip()`. The function `rflip`
simulates coin tosses, with heads as success and tails as failures.

```{r}
coin_toss <- rflip(n=5) #<1>
coin_toss
```
1. Flip a fair coin five times


```{r}
str(coin_toss)
```

The output of `rflip` is a `cointoss` object, which displays the number of heads alongside the corresponding proportion of heads. We can change the probability of obtaining heads making the coin unfair. For example,

```{r}
rflip(n = 10, prob = 0.3) #<1>
```
1. Flip 10 coins, each with probability of 0.3 of landing on heads


we can summarize the above output and return a `data.frame` which we can extract information from 

```{r}
coin_toss_data <- rflip(n = 10, prob = 0.3, summarize = TRUE)
```

```{r,echo=FALSE}
coin_toss_data
```

```{r}
str(coin_toss_data)
```


:::vertical-space
:::

**Combining `do()` and `rflip()`**

Consider the following example,

```{r}
result <- do(2) * rflip(n=5) #<1>
result
```
1. Randomly flip a fair coin 5 times and replicate this procedure two times


Recall the output after performing a `do()` statement will be a data.frame where each row is a replication of the procedure following the `*` operator. The first row shows the number of tosses, how many heads/tails where obtained and the corresponding proportion of heads after `n` tosses

```{r,echo=FALSE}
str(result)
```











